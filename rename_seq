#!/usr/bin/env ruby

# Sequential file renaming tool
#
# Copyright (C) 2013 Kyle Johnson <kyle@vacantminded.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'optparse'
require 'fileutils'


$opts, $files = {}, {}

OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] DIR_1 ... DIR_N"

  opts.separator ''
  opts.separator 'Options:'
  opts.separator ''

  $opts[:output_dir] = 'sorted'
  opts.on '-o', '--output-dir DIRECTORY', 'Directory into which renamed files are copied' do |dir|
    $opts[:output_dir] = dir
  end

  $opts[:prefix] = 'DSC_'
  opts.on '-p', '--prefix PREFIX', 'Prefix to include before number.' do |prefix|
    $opts[:prefix] = prefix
  end

  $opts[:digits] = 4
  opts.on '-n', '--digits NUM', 'Number of digits to include in file numbers.' do |digits|
    $opts[:digits] = digits.to_i
  end
end.parse!

FileUtils.mkdir_p $opts[:output_dir]

def process file
  return if File.directory? file

  mtime = File.mtime file
 
  $files[file] = mtime
end

ARGV.each do |input_dir|
  unless File.directory? input_dir
    $stderr.puts "Warning: skipping nonexistent directory \"#{input_dir}\""
    next
  end

  Dir["#{input_dir}/**/*"].each { |f| process f }
end

# XXX: create multiple sub-directories inside output_dir and restart numbering
# XXX: also handle 0 digit case, since we might not need padding, making this
#      problem irrelevant
if $files.length.to_s.length > $opts[:digits]
  abort 'error: need more prefix digits for this many files'
end

result = $files.sort_by {|n, v| v}

result.each_with_index do |(file, mtime), num|
  ext = File.extname file
  num = num.to_s.rjust $opts[:digits], '0'

  output_file = "#{$opts[:output_dir]}/#{$opts[:prefix]}#{num}#{ext}"

  puts "#{file} -> #{output_file}"

  FileUtils.cp file, output_file
end

